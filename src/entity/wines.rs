//! SeaORM Entity. Generated by sea-orm-codegen 0.4.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "wines")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub notes: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub why: Option<String>,
    pub inventory: i32,
    pub rating: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub image: Option<String>,
    pub color_id: i32,
    pub wine_type_id: i32,
    pub producer_id: i32,
    pub viti_area_id: Option<i32>,
    pub user_id: i32,
    pub is_in_shopping_list: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::colors::Entity",
        from = "Column::ColorId",
        to = "super::colors::Column::Id",
        on_update = "NoAction",
        on_delete = "Restrict"
    )]
    Colors,
    #[sea_orm(
        belongs_to = "super::producers::Entity",
        from = "Column::ProducerId",
        to = "super::producers::Column::Id",
        on_update = "NoAction",
        on_delete = "Restrict"
    )]
    Producers,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users,
    #[sea_orm(
        belongs_to = "super::viti_areas::Entity",
        from = "Column::VitiAreaId",
        to = "super::viti_areas::Column::Id",
        on_update = "NoAction",
        on_delete = "Restrict"
    )]
    VitiAreas,
    #[sea_orm(
        belongs_to = "super::wine_types::Entity",
        from = "Column::WineTypeId",
        to = "super::wine_types::Column::Id",
        on_update = "NoAction",
        on_delete = "Restrict"
    )]
    WineTypes,
    #[sea_orm(has_many = "super::wine_grapes::Entity")]
    WineGrapes,
    #[sea_orm(has_many = "super::purchases::Entity")]
    Purchases,
}

impl Related<super::colors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Colors.def()
    }
}

impl Related<super::producers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Producers.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::viti_areas::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VitiAreas.def()
    }
}

impl Related<super::wine_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WineTypes.def()
    }
}

impl Related<super::wine_grapes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WineGrapes.def()
    }
}

impl Related<super::purchases::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Purchases.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
